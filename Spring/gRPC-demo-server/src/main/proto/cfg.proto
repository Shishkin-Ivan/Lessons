// Используем третью версию синтаксиса Protocol Buffers
syntax = "proto3";

// ==================================================================
// Этот блок задаёт параметры генерации Java-классов
// ==================================================================

// Указываем Java-пакет, куда будут сгенерированы классы из этого .proto
option java_package = "com.example.grpcdemoserver.grpc";

// Указываем имя внешнего Java-класса-обёртки, внутри которого будут
// вложены все сгенерированные классы (messages, service, stubs и т.д.)
option java_outer_classname = "HelloWorldProto";


// ==================================================================
// Определение gRPC сервиса
// ==================================================================
//
// gRPC сервис — это набор удалённых методов, которые можно вызвать
// с помощью клиента. Каждый метод описывает:
// 1. Какой тип сообщения он принимает (request).
// 2. Какой тип сообщения он возвращает (response).
//
service Greeter {

  // Метод SayHello
  // - принимает объект HelloRequest
  // - возвращает объект HelloReply
  rpc SayHello (HelloRequest) returns (HelloReply) {}

  // Метод SayHelloAgain
  // - тоже принимает HelloRequest
  // - возвращает HelloReply
  // Отличие только в том, что логика ответа может быть другой
  rpc SayHelloAgain (HelloRequest) returns (HelloReply) {}
}


// ==================================================================
// Определение сообщений (message) для общения клиента и сервера
// ==================================================================
//
// Message — это структура данных (как DTO в Java), которая может
// содержать строки, числа, массивы, вложенные сообщения и т.д.
//
// Порядковый номер (например `= 1`) обязателен и определяет "тег"
// поля при сериализации. Это нужно для эффективности передачи
// и обратной совместимости.
//


// Сообщение запроса: клиент → сервер
message HelloRequest {
  // Имя пользователя
  string name = 1;

  // Фамилия пользователя
  string surname = 2;
}

// Сообщение ответа: сервер → клиент
message HelloReply {
  // Текст приветствия, сгенерированный на сервере
  string message = 1;
}